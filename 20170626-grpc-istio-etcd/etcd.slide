################################################

etcd

Gyu-Ho Lee
https://github.com/coreos/etcd

################################################

* Agenda

- Introduction to etcd
- How etcd uses gRPC
- gRPC performance

################################################

* What is etcd

- *Distributed*key-value*store*
- Open source [[https://github.com/coreos/etcd][github.com/coreos/etcd]] (June 2013 ~)
- vs. ZooKeeper (May 2008 ~)

Widely adopted

- Kubernetes, OpenStack, [[https://github.com/istio/galley/issues/20][Istio/gallery]]
- Red Hat, Baidu, Alibaba, Huawei, Yandex, EMC, Cisco, NTT

################################################

* etcd as Istio/gallery storage backend

.image img/istio-gallery-etcd.png _ 800

################################################

* etcd is distributed

- Distributed (typically 3 or 5 nodes)
- *Consistent* + *Partition*tolerant* + *(Highly)*Available*, in CAP theorem
- String(Sequential) Consistency (NOT eventual consistency)
- Consensus over Raft

################################################

* gRPC use case

################################################

* use case: Unary RPCs

One-shot request

  cli.Put(ctx, "foo", "bar", LeaseID)
  cli.Get(ctx, "foo")
  cli.Delete(ctx, "foo")

  // Transaction
  kvc.Txn(ctx).
    If(clientv3.Compare(clientv3.Value("key"), ">", "abc")). // txn value comparisons are lexical
    Then(clientv3.OpPut("key", "XYZ")).                      // this runs, since 'xyz' > 'abc'
    Else(clientv3.OpPut("key", "ABC")).
    Commit()

  // Distributed locks
  mu := concurrency.NewMutex(cli, "foo")
  mu.Lock()
  mu.Unlock()

################################################

* use case: Unary RPCs

- [[https://github.com/gogo/protobuf][gogo/protobuf]] for Go-code generation
- [[https://github.com/grpc-ecosystem/grpc-gateway][grpc-gateway]] for HTTP endpoints

  // for grpc-gateway
  import "google/api/annotations.proto";

  option (gogoproto.marshaler_all) = true;
  option (gogoproto.unmarshaler_all) = true;

  service KV {
    // Range gets the keys in the range from the key-value store.
    rpc Range(RangeRequest) returns (RangeResponse) {
        option (google.api.http) = {
          post: "/v3alpha/kv/range"
          body: "*"
      };
    }

################################################

* use case: Streaming RPCs

  // Watch for updates on key
  ch := cli.Watch(ctx, "foo")
  for res := range ch {}

  // Bi-directional stream
  service Watch
    rpc Watch(stream WatchRequest) returns (stream WatchResponse)

  // Uni-directional stream
  service Election
    rpc Observe(LeaderRequest) returns (stream LeaderResponse)

################################################

* use case: etcd with grpc-go

- [[https://github.com/coreos/etcd/tree/master/clientv3][etcd/clientv3]] implements its own grpc.Balancer interface
- etcd server uses interceptor for compatibility check

################################################

* use case: etcd Java client

In active development

[[https://github.com/coreos/jetcd][github.com/coreos/jetcd]]

################################################

* use case: grpc-gateway

"Experimental" [[https://github.com/grpc-ecosystem/grpc-gateway][grpc-gateway]] for HTTP endpoints

  # gRPC with HTTT/2 + Protocol Buffer
  etcdctl watch foo

  # HTTT/1 + JSON
  curl -L http://localhost:2379/v3alpha/watch \
    -X POST -d ''{"create_request": {"key":"Zm9v"} }'

################################################

* use case: Proxy

Reverse proxy operating at the gRPC layer (L7)

- Reduce workloads on core etcd cluster

Scale out (not by adding more nodes)

- Cache keys
- Coalesce Watch streams

.image img/etcd-proxy.png _ 900

################################################

* use case: Monitoring

- [[https://github.com/prometheus/prometheus][Prometheus]] - built-in metrics in etcd server code
- [[https://github.com/grpc-ecosystem/go-grpc-prometheus][go-grpc-prometheus]] - client/server RPC monitoring (interceptor)
- [[https://github.com/grafana/grafana][Grafana]] - dashboard

################################################

* use case: Monitoring

  sum(rate(grpc_server_started_total{grpc_type="unary"}[5m])) by (grpc_method)
  sum(grpc_server_handled_total{grpc_service="etcdserverpb.Watch",grpc_type="bidi_stream"})

.image img/etcd-monitoring.png _ 700

################################################

* use case: TODO

- [[https://godoc.org/google.golang.org/grpc/health][grpc-go/health]] for health checking
- grpc-go tracing

################################################

* gRPC Performance

################################################

* RPC

- gRPC, HTTP/2, Protocol Buffer
- Unary RPC (one-shot request)
- Stream RPC
- Multiplex requests in single TCP connection

Zookeeper

- Jute
- Creates Long-live session
- Requires FIFO response ordering

################################################

* CPU Usage

.image img/2017Q2-01-write-1M-cpu-client-scaling.png _ 1000

################################################

* Network Usage

.image img/2017Q2-02-write-1M-network-traffic-best-throughput.png _ 1000

################################################

* Throughput

.image img/2017Q2-01-write-1M-throughput-client-scaling.png _ 1000

################################################

* Latency

TCP connections: 100 vs. 1,000

.image img/2017Q2-02-write-1M-latency-best-throughput.png _ 1000

################################################
