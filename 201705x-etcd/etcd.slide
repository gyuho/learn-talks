################################################

etcd
May 2017

Gyu-Ho Lee
https://github.com/coreos/etcd

################################################

* Agenda

- What is etcd
- How etcd works
- How to operate etcd
- etcd Performance
- Q/A

################################################

* What is etcd

- *Distributed*key-value*store*
- Open source [[https://github.com/coreos/etcd][github.com/coreos/etcd]] (June 2013 ~)
- Still new, compared to ZooKeeper (May 2008 ~)

Widely adopted

- Kubernetes, YouTube Doorman, Chain, AWS Blox
- Red Hat, EMC, Cisco, NTT, Huawei, Baidu, Alibaba

################################################

* etcd is distributed

- Distributed (typically 3 to 5 nodes)
- *Consistent* + *Partition*tolerant* + *(Highly)*Available*, in CAP theorem
- Consensus over Raft

################################################

* Write-ahead log (WAL)

- Storage layer for Raft entries in Protocol Buffer (encoded blobs)
- Rolling checksum (CRC32)
- Pre-allocated 64 MB segments
- Buffered writes
- Prevent/Recover write tears or data corruptions

.image img/etcd-wal.png _ 1000

################################################

* Backend database (B-, B+ tree)

- In-memory B- tree indexes keys to revision
- On-disk B+ tree indexes revisions to key-value data (BoltDB)
- Retains historical key revisions (MVCC)

################################################

* Snapshot

Automatically in server-side

- Automatic snapshot for every 10,000 writes, compact Raft logs
- Leader sends snapshots to slow followers

Manually requested by client

- Manual snapshot, point-in-time backup of a cluster
- Create a new cluster and imports data from the snapshot

  etcdctl snapshot save
  etcdctl snapshot restore

################################################

* Connection model

- gRPC, HTTP/2, Protocol Buffer
- Unary RPC (one-shot request)
- Streaming RPC
- Multiplexing requests

################################################

* Client API

  cli.Put(ctx, "foo", "bar", LeaseID)
  cli.Get(ctx, "foo")
  cli.Delete(ctx, "foo")

  // Transaction
  kvc.Txn(ctx).
    If(clientv3.Compare(clientv3.Value("key"), ">", "abc")). // txn value comparisons are lexical
    Then(clientv3.OpPut("key", "XYZ")).                      // this runs, since 'xyz' > 'abc'
    Else(clientv3.OpPut("key", "ABC")).
    Commit()

  // Watch for updates on key
  ch := cli.Watch(ctx, "foo")
  for res := range ch {}

  // Distributed locks
  mu := concurrency.NewMutex(cli, "foo")
  mu.Lock()
  mu.Unlock()

################################################

* Proxy

Scale out (not by adding more nodes)

- Cache keys
- Coalesce streams
- Proxy discovery

.image img/etcd-proxy.png _ 900

################################################

* etcd is reliable

Functional tests [[http://dash.etcd.io/dashboard/db/functional-tests][dash.etcd.io]]

- Kill one/all members
- Kill leader
- Network partition
- Network latency
- Crash tests with fail-points

Consistency checking after recovery

>8,000 failure injections per day (1 failure injection for every 10-second)

>3M injected so far

################################################

* etcd is reliable

.image img/etcd-functional-testing.png _ 1000

################################################

* etcd is reliable, and fast

For writes,

- Low latency
- Tight bounds
- Predictable performance

################################################

* Monitoring

- Prometheus (metrics), Grafana (dashboard)
- Leader exists or not, Number of leader changes
- RPC latencies, F-sync latencies, etc.

################################################

* Monitoring

.image img/etcd-monitoring.png _ 1000

################################################

* More?

Things not covered today

Fast linearized reads (quorum lease), Raft leadership transfer, Member configuration (add/remove), Package raft, Package mvcc, TLS reloading, Managing secrets (PGP in etcd), Distributed locks, Leader elections, Barriers, Software transactional memory (STM), Namespace, gRPC naming, gRPC gateway, Embedded etcd, Mirroring, Gateway, Monitoring, etcd operator (backups, automatic membership operations), Java client (jetcd), Zookeeper emulation (zetcd), Consul emulation (cetcd), etcd testing suites (unit, integration, end-to-end, functional-tester, etcd-runner), Performance testing information (dbtester), etcd playground (play.etcd.io), etc.

################################################
